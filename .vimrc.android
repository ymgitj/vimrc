set nocompatible
syntax enable
syntax on            
set t_Co=256
set background=dark
colo elflord                     
set mouse=a

"---------------------------------
let g:iswindows = 0
let g:islinux = 0

if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
    if has("gui_running")
        let g:isGUI = 1
    else
        let g:isGUI = 0
    endif
else
    let g:islinux = 1
endif

"---------------------------------
" < 判断是终端还是 Gvim >
"--------------------------------

filetype off

if g:islinux
    set rtp+=/sdcard/1CommonFile/.vim/bundle/Vundle.vim
    call vundle#begin('/sdcard/1CommonFile/.vim/bundle')
else
    set rtp+=$VIM/vimfiles/bundle/Vundle.vim
endif

"-------------------------------
" 让vundle管理插件版本,必须
Plugin 'VundleVim/Vundle.vim'
"Plugin 'ervandew/supertab'
" 以下范例用来支持不同格式的插件安装.
" 请将安装插件的命令放在vundle#begin和vundle#end之间.
" Github上的插件
" 格式为 Plugin '用户名/插件仓库名'
"Plugin 'tpope/vim-fugitive'
" 来自 http://vim-scripts.org/vim/scripts.html 的插件
" Plugin '插件名称' 实际上是 Plugin 'vim-scripts/插件仓库名' 只是此处的用户名可以省略
Plugin 'L9'
" 由Git支持但不再github上的插件仓库 Plugin 'git clone 后面的地址'
Plugin 'git://git.wincent.com/command-t.git'
" 本地的Git仓库(例如自己的插件) Plugin 'file:///+本地插件仓库绝对路径'
"Plugin 'file:///home/gmarik/path/to/plugin'
" 插件在仓库的子目录中.
" 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" 安装L9，如果已经安装过这个插件，可利用以下格式避免命名冲突
"Plugin 'ascenator/L9', {'name': 'newL9'}

"###############################
"Auto Completion
"-------------------------------------
"ultisnips
Plugin 'sirver/ultisnips'
"-------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
"" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"-------------------------------------
Plugin 'honza/vim-snippets'

"--------------------
Plugin 'mattn/emmet-vim'
"--------
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

"## Redefine trigger key
"To remap the default `<C-Y>` leader:
let g:user_emmet_expandabbr_key='<Leader>e'

"-------------------------------------
"JavaScript
Plugin 'pangloss/vim-javascript'
"---------------
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
set foldmethod=syntax
let g:javascript_conceal_function = "ƒ"
let g:javascript_conceal_null     = "ø"
let g:javascript_conceal_this     = "@"
let g:javascript_conceal_return   = "⇚"
let g:javascript_conceal_undefine = "¿"
let g:javascript_conceal_NaN      = "ℕ"
let g:javascript_conceal_prototyp = "¶"
let g:javascript_conceal_static   = "•"
let g:javascript_conceal_super    = "Ω"
let g:javascript_conceal_arrow_fu = "⇒"
let g:javascript_conceal_noarg_ar = "🞅"
let g:javascript_conceal_underscore_arrow_function = "🞅"
set conceallevel=1

"-------------------------------
Plugin 'hail2u/vim-css3-syntax'
Plugin 'ap/vim-css-color'
augroup VimCSS3Syntax
  autocmd!

  autocmd FileType css setlocal iskeyword+=-
augroup END

"###############################
"Status Bar
"--------------------	
Plugin 'Yggdroot/indentLine'
"----------
let g:indentLine_char = "┊"
let g:indentLine_first_char = "┊"

"--------------------	
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_theme='simple'
let g:airline#extensions#tabline#enabled = 1

let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

"----------------------------------
"let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif


"--------------------	
let g:airline_left_sep = ' '
let g:airline_left_alt_sep = ' '
let g:airline_right_sep = ' '
let g:airline_right_alt_sep = ' '
let g:airline_symbols.branch = ' '
let g:airline_symbols.readonly = ' '
let g:airline_symbols.linenr = ' '

"###############################
"Syntax Check
"-------------------------------
"Plugin 'scrooloose/syntastic'
"Plugin 'sheerun/vim-polyglot'
"-------------------------------
Plugin 'w0rp/ale'
"----------------
let g:ale_linters = {
\    'javascript': ['eslint'],
\    'css': ['stylelint'],
\}

let g:ale_fixers = {
\    'javascript': ['eslint'],
\    'css': ['stylelint'],
\}
let g:ale_fix_on_save = 1

let g:ale_sign_column_always = 1
let g:ale_sign_error = '●'
let g:ale_sign_warning = '▶'

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

"###############################
"Program Annotation
"-------------------------------
Plugin 'scrooloose/nerdcommenter'
"------------
" <leader>c<space> 注释/取消注释
" <leader>cc // 注释
" <leader>cm 只用一组符号注释
" <leader>cA 在行尾添加注释
" <leader>c$ /* 注释 */
" <leader>cs /* 块注释 */
" <leader>cy 注释并复制
" <leader>ca 切换　// 和 /* */
" <leader>cu 取消注释

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCustomDelimiters = {
            \ 'javascript': { 'left': '//', 'leftAlt': '/**', 'rightAlt': '*/' },
            \ 'less': { 'left': '/**', 'right': '*/' }
        \ }

let g:NERDAltDelims_javascript = 1
let g:NERDDefaultNesting = 0

"###############################
"Tree 
"-------------------------------
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
"Plugin 'Xuyuanp/nerdtree-git-plugin'

autocmd vimenter * NERDTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeMinimalUI = 1
let NERDTreeShowHidden = 1

let g:nerdtree_tabs_open_on_console_startup =1
let g:nerdtree_tabs_focus_on_files = 1

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" o 打开关闭文件或目录
" e 以文件管理的方式打开选中的目录
" t 在标签页中打开
" T 在标签页中打开，但光标仍然留在 NERDTree
" r 刷新光标所在的目录
" R 刷新当前根路径
" X 收起所有目录
" p 小写，跳转到光标所在的上一级路径
" P 大写，跳转到当前根路径
" J 到第一个节点
" K 到最后一个节点
" I 显示隐藏文件
" m 显示文件操作菜单
" C 将根路径设置为光标所在的目录
" u 设置上级目录为根路径
" ctrl + w + w 光标自动在左右侧窗口切换
" ctrl + w + r 移动当前窗口的布局位置
" :tabc 关闭当前的 tab
" :tabo   关闭所有其他的 tab
" :tabp   前一个 tab
" :tabn   后一个 tab
" gT      前一个 tab
" gt      后一个 tab

"-------------------------------
"Plugin 'Raimondi/delimitMate'
Plugin 'jiangmiao/auto-pairs'

"-------------------------------
"neocomplcache
Plugin 'Shougo/neocomplcache.vim'
"------------------
let g:neocomplcache_enable_at_startup = 1     "vim 启动时启用插件

"---------------------------
Plugin 'danro/rename.vim'
"-------------------------------
"Plugin 'junegunn/vim-plug'
"-------------------------------
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
"-------------------------------
"Plugin 'isnowfy/python-vim-instant-markdown'

"###############################
"Markdown
"-----------------------------------
Plugin 'suan/vim-instant-markdown'
"----------
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0

"###############################
"-------------------------------
"Plugin 'majutsushi/tagbar'
"-------------------------------
"Plugin 'Valloric/YouCompleteMe'

"-------------------------
"Plugin 'vim-scripts/ctags.vim'
"Plugin 'ccvext.vim'

"---------------------------
"Plugin 'christoomey/vim-run-interactive'
"Plugin 'croaky/vim-colors-github'
"Plugin 'kchmck/vim-coffee-script'
"Plugin 'kien/ctrlp.vim'
"Plugin 'pbrisbin/vim-mkdir'
"Plugin 'slim-template/vim-slim'
"Plugin 'thoughtbot/vim-rspec'
"Plugin 'tpope/vim-bundler'
"Plugin 'tpope/vim-endwise'
"Plugin 'tpope/vim-fugitive'
"Plugin 'tpope/vim-rails'
"Plugin 'tpope/vim-surround'
"Plugin 'vim-ruby/vim-ruby'
"Plugin 'vim-scripts/matchit.zip'
"Plugin 'vim-scripts/tComment'
"Plugin 'godlygeek/tabular'
"Plugin 'jelera/vim-javascript-syntax'
"Plugin 'altercation/vim-colors-solarized'
"Plugin 'othree/html5.vim'
"Plugin 'xsbeats/vim-blade'
"Plugin 'groenewege/vim-less'
"Plugin 'Lokaltog/vim-easymotion'
"Plugin 'klen/python-mode'

"--------------------
"Plugin 'a.vim'
"Plugin 'Align'
"Plugin 'bufexplorer.zip'
"Plugin 'cSyntaxAfter'
"Plugin 'Mark--Karkat'
"Plugin 'OmniCppComplete'
"Plugin 'repeat.vim'
"Plugin 'wesleyche/SrcExpl'
"Plugin 'std_c.zip'
"Plugin 'TxtBrowser'
"Plugin 'ZoomWin'

"---------------------------
call vundle#end()            
filetype plugin indent on  

"---------------------------------------
"solve emmet problem
"--------------------
"call plug#begin('$VIM/vimfiles/bundle')
"Plug 'mattn/emmet-vim'
"call plug#end()

"------------------
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
"不生成备份
behave mswin

"------------------------------
"SET
"---
let mapleader="-"
"设置默认编码方式"
set encoding=utf-8               
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,latin1
 "解决控制台乱码windows 系统默认utf-8"
"language messages zh_CN.utf-8      
"set backspace=indent,eol,start      ""
set viminfo='1000,f1,<500
set noundofile
set autowriteall
"可使切换文件时，修改的文件被自动保存。
set nobackup
set noswapfile
set backspace=2          "设置backspace可用"
set autoindent           "自动缩进"
set smartindent          "智能缩进"
set tabstop=4            "tab键宽度"
set shiftwidth=4         "换行时自动缩进宽度"
set autoread             "外文件修改时自动重载"
set incsearch            "搜索实时匹配"
set laststatus=2

"---------------------
"-MAP
"-------------
nmap <F2> :Rename<Space
nmap <tab> :tabn<CR>
nmap <Leader>t :tabedit<Space>
nmap <F10> :w!<CR>
imap <F10> <Esc>:w!<CR>
nmap ; :
nmap <Leader>v :tabnew ~/.vimrc<CR>
nmap <Leader>s :source ~/.vimrc<CR>
nmap <F8> :TagbarToggle<CR>
nmap <Leader>z ZZ<CR>
nmap <Leader>q ZQ<CR>
nmap -- :w!<CR>
imap -- <Esc>:w!<CR>
nmap <C-i> :PluginInstall<cr>
nmap <C-u> :PluginClean<cr>
"-------------------------------
"nmap <F5> <Esc>:!javac %<CR>
"nmap <F6> <Esc>:!java %<<CR>

" --------------------------------------------
" 自动切换目录为当前编辑文件所在目录
au BufRead,BufNewFile,BufEnter * cd %:p:h

"---------------
"powerline
"------------
"let g:Powerline_symbols = 'unicode'


"---------------------------------------
"molokai# Molokai Color Scheme for Vim
"----------
"let g:molokai_original = 1
"let g:rehash256 = 1

"
"-----------------------------------
nmap -ll :call TitleSet()<cr>
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call TitleSet()" 
""定义函数SetTitle，自动插入文件头 

func TitleSet() 
"如果文件类型为.sh文件 
if &filetype == 'sh' 
"call setline(1,"\#########################################################################") 
call append(line(".")-1,"\#########################################################################") 
call append(line(".")+0, "\# File Name: ".expand("%")) 
call append(line(".")+1, "\# Author: myyu") 
call append(line(".")+2, "\# mail: ym163j@163.com") 
call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
call append(line(".")+4, "\#########################################################################") 
call append(line(".")+5, "\#!/bin/bash") 
call append(line(".")+6, "") 
else 
"call setline(1, "/*************************************************************************") 
call append(line(".")-1, "/*************************************************************************") 
call append(line(".")+0, " > File Name: ".expand("%")) 
call append(line(".")+1, " > Author: myyu") 
call append(line(".")+2, " > Mail: ym163j@163.com ") 
call append(line(".")+3, " > Created Time: ".strftime("%c")) 
call append(line(".")+4, " ************************************************************************/") 
call append(line(".")+5, "")
endif
if &filetype == 'cpp'
call append(line(".")+6, "#include<iostream>")
call append(line(".")+7, "using namespace std;")
call append(line(".")+8, "")
endif
if &filetype == 'c'
call append(line(".")+6, "#include<stdio.h>")
call append(line(".")+7, "")
endif
"新建文件后，自动定位到文件末尾
autocmd BufNewFile * normal G
endfunc
"~~~~~~~~~
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.

"let g:UltiSnipsExpandTrigger="<tab>"

"let g:UltiSnipsJumpForwardTrigger="<c-b>"

"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"


